// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/test_schema.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "proto/TestSchema.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - TPROTOTestSchemaRoot

@implementation TPROTOTestSchemaRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - TPROTOTestSchemaRoot_FileDescriptor

static GPBFileDescriptor *TPROTOTestSchemaRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.example.test_plugin"
                                                 objcPrefix:@"TPROTO"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum TPROTOMethodChannelName

GPBEnumDescriptor *TPROTOMethodChannelName_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TestPlugin\000";
    static const int32_t values[] = {
        TPROTOMethodChannelName_TestPlugin,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(TPROTOMethodChannelName)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:TPROTOMethodChannelName_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL TPROTOMethodChannelName_IsValidValue(int32_t value__) {
  switch (value__) {
    case TPROTOMethodChannelName_TestPlugin:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum TPROTOMethodChannelCalls

GPBEnumDescriptor *TPROTOMethodChannelCalls_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "GetPlatformVersion\000";
    static const int32_t values[] = {
        TPROTOMethodChannelCalls_GetPlatformVersion,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(TPROTOMethodChannelCalls)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:TPROTOMethodChannelCalls_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL TPROTOMethodChannelCalls_IsValidValue(int32_t value__) {
  switch (value__) {
    case TPROTOMethodChannelCalls_GetPlatformVersion:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - TPROTOPlatformVersionResponse

@implementation TPROTOPlatformVersionResponse

@dynamic osName;
@dynamic osVersion;

typedef struct TPROTOPlatformVersionResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t osVersion;
  NSString *osName;
} TPROTOPlatformVersionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "osName",
        .dataTypeSpecific.className = NULL,
        .number = TPROTOPlatformVersionResponse_FieldNumber_OsName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TPROTOPlatformVersionResponse__storage_, osName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "osVersion",
        .dataTypeSpecific.className = NULL,
        .number = TPROTOPlatformVersionResponse_FieldNumber_OsVersion,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TPROTOPlatformVersionResponse__storage_, osVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TPROTOPlatformVersionResponse class]
                                     rootClass:[TPROTOTestSchemaRoot class]
                                          file:TPROTOTestSchemaRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TPROTOPlatformVersionResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
